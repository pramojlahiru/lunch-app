<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Choose Your Meal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="/styles.css">
</head>
<body class="bg-gray-100">
<nav class="bg-white shadow-lg">
    <div class="max-w-6xl mx-auto px-4">
        <div class="flex justify-between items-center py-4">
            <div class="flex items-center space-x-2">
                <img src="/fried-rice-outlined.png" class="h-8 w-8" alt="Lunch App Logo">
                <span class="text-xl font-bold text-gray-800">Lunch Selection Portal</span>
            </div>
            <div class="flex items-center space-x-4">
                <span class="text-gray-600">
                    <span id="greeting"></span>, <%= user.displayName %>
                </span>
                <% if (user.role === 'admin') { %>
                    <a href="/admin"
                       class="text-gray-600 hover:text-[#4EAD68] transition-colors"
                       title="Admin Dashboard">
                        <img src="/admin-dashboard.png" class="h-8 w-8 hover-scale-icon" alt="Admin Dashboard">
                    </a>
                <% } %>
                <a href="/logout"
                   class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600
                              transition-all shadow-md">
                    Logout
                </a>
            </div>
        </div>
    </div>
</nav>

<div class="max-w-4xl mx-auto py-12 px-4">
    <div class="bg-white rounded-2xl shadow-xl p-8 hover-scale">
        <h2 class="text-2xl font-bold text-gray-800 mb-8">Select Your Preference</h2>

        <form action="/preference" method="post" id="preference-form">
            <!-- Date Picker -->
            <div class="mb-8">
                <label for="datePicker" class="block text-gray-700 text-sm font-semibold mb-2">Select Date</label>
                <input type="text" id="datePicker" name="date"
                       class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 flatpickr"
                       required aria-label="Select date">
            </div>

            <!-- Meal Options -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <% const mealOptions = {
                    veg: { title: 'Veg', desc: 'Vegetable Rice', img: '/salad.png', color: 'green' },
                    chicken: { title: 'Chicken', desc: 'Chicken Rice', img: '/chicken.png', color: 'orange' },
                    fish: { title: 'Fish', desc: 'Fish Rice', img: '/fish.png', color: 'blue' }
                };
                Object.entries(mealOptions).forEach(([pref, {title, desc, img, color}]) => { %>
                    <label class="cursor-pointer">
                        <input type="radio"
                               name="preference"
                               value="<%= pref %>"
                               class="hidden peer"
                               required
                               aria-label="<%= title %>">
                        <div class="p-6 border-2 rounded-2xl peer-checked:border-<%= color %>-500 peer-checked:bg-<%= color %>-50 hover:border-<%= color %>-300 transition-all h-full">
                            <div class="text-center">
                                <img src="<%= img %>"
                                     alt="<%= title %> meal"
                                     class="w-16 h-16 mx-auto mb-4 animate-pulse">
                                <h3 class="text-xl font-semibold mb-2"><%= title %></h3>
                                <p class="text-gray-600 text-sm"><%= desc %></p>
                            </div>
                        </div>
                    </label>
                <% }) %>
            </div>

            <div class="mt-8 text-center">
                <button type="submit"
                        class="bg-blue-600 text-white px-8 py-3 rounded-xl hover:bg-blue-700
                                   transition-all shadow-lg relative" id="submit-btn">
                    <span class="when-enabled">Save Preference</span>
                    <span class="when-loading hidden">
                        <svg class="animate-spin h-5 w-5 text-white mx-auto"
                             xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </button>
            </div>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize preferences from server data
        const preferences = <%- JSON.stringify(preferences) %>;
        const submitBtn = document.getElementById('submit-btn');
        const btnText = submitBtn.querySelector('.when-enabled');
        const dateInput = document.getElementById('datePicker');

        // Function to update button text
        const updateButtonText = () => {
            const selectedDate = dateInput.value;
            btnText.textContent = selectedDate && preferences[selectedDate]
                ? 'Edit Preference'
                : 'Save Preference';
        };

        // Set initial button text
        updateButtonText();

        // Date calculation functions
        const getNextWeekday = (date) => {
            const nextDay = new Date(date);
            nextDay.setDate(nextDay.getDate() + 1);
            while ([0, 6].includes(nextDay.getDay())) {
                nextDay.setDate(nextDay.getDate() + 1);
            }
            return nextDay;
        };

        const now = new Date();
        const currentHour = now.getHours();
        let minDate, maxDate;

        if (currentHour < 10) {
            minDate = "today";
            maxDate = getNextWeekday(now);
        } else {
            minDate = getNextWeekday(now);
            maxDate = getNextWeekday(minDate);
        }

        // Flatpickr initialization
        flatpickr("#datePicker", {
            minDate: minDate,
            maxDate: maxDate,
            disable: [date => [0, 6].includes(date.getDay())],
            allowInput: false,
            clickOpens: true,
            defaultDate: minDate,
            onChange: function(selectedDates) {
                dateInput.classList.remove('date-picker-error');
                updateButtonText();
                dateInput.reportValidity();
                checkSavedPreference(dateInput.value);
            }
        });

        // Function to check saved preference
        const checkSavedPreference = (selectedDate) => {
            const preference = preferences[selectedDate];
            if (preference) {
                document.querySelectorAll('input[name="preference"]').forEach(radio => {
                    radio.checked = radio.value === preference;
                });
            } else {
                document.querySelectorAll('input[name="preference"]').forEach(radio => {
                    radio.checked = false;
                });
            }
        };

        // Set initial state
        const initialDate = dateInput.value;
        checkSavedPreference(initialDate);
        updateButtonText();

        // Form submission handler
        document.getElementById('preference-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const btn = document.getElementById('submit-btn');
            const form = e.target;
            const dateInput = document.getElementById('datePicker');

            // Reset error state
            dateInput.classList.remove('date-picker-error');

            // Client-side validation
            if (!dateInput.value) {
                dateInput.classList.add('date-picker-error');
                Toastify({
                    text: "Please select a date first!",
                    duration: 3000,
                    backgroundColor: "#EF4444",
                    close: true,
                    gravity: "top",
                    position: "right",
                    style: { display: 'flex', alignItems: 'center' }
                }).showToast();
                return;
            }

            const preference = form.querySelector('input[name="preference"]:checked');
            if (!preference) {
                Toastify({
                    text: "Please select a meal preference!",
                    duration: 3000,
                    backgroundColor: "#EF4444",
                    close: true,
                    gravity: "top",
                    position: "right",
                    style: { display: 'flex', alignItems: 'center' }
                }).showToast();
                return;
            }

            // Show loading state
            btn.classList.add('opacity-75', 'cursor-not-allowed');
            btn.querySelector('.when-enabled').classList.add('hidden');
            btn.querySelector('.when-loading').classList.remove('hidden');

            try {
                const payload = new URLSearchParams();
                payload.append('date', dateInput.value);
                payload.append('preference', preference.value);

                const response = await fetch('/preference', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: payload
                });

                const result = await response.json();

                if (response.ok) {
                    // Update local preferences and UI
                    preferences[dateInput.value] = preference.value;
                    updateButtonText();
                    preference.checked = false;
                    dateInput._flatpickr.clear();
                    checkSavedPreference(dateInput.value);
                }

                Toastify({
                    text: result.message || result.error,
                    duration: 3000,
                    backgroundColor: response.ok ? "#4CAF50" : "#EF4444",
                    close: true,
                    gravity: "top",
                    position: "right",
                    style: { display: 'flex', alignItems: 'center' }
                }).showToast();

            } catch (error) {
                Toastify({
                    text: "Network error - please try again",
                    duration: 3000,
                    backgroundColor: "#EF4444",
                    close: true,
                    style: { display: 'flex', alignItems: 'center' }
                }).showToast();
            } finally {
                btn.classList.remove('opacity-75', 'cursor-not-allowed');
                btn.querySelector('.when-enabled').classList.remove('hidden');
                btn.querySelector('.when-loading').classList.add('hidden');
            }
        });

        // Dynamic greeting
        const updateGreeting = () => {
            const hour = new Date().getHours();
            document.getElementById('greeting').textContent =
                hour < 12 ? 'Good Morning' :
                    hour < 18 ? 'Good Afternoon' : 'Good Evening';
        };
        updateGreeting();
        setInterval(updateGreeting, 60000);
    });
</script>
</body>
</html>